// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  image         String?
  role          Role         @default(SUBMITTER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  submissions   Submission[] @relation("SubmittedBy")
  comments      Comment[]
  mentions      Mention[]
  auditLogs     AuditLog[]   @relation("PerformedBy")
}

enum Role {
  ADMIN
  REVIEWER
  SUBMITTER
  VIEWER
}

model Submission {
  id            String     @id @default(cuid())
  title         String
  customerName  String
  orgId         String
  status        Status     @default(SUBMITTED)
  submittedBy   User       @relation("SubmittedBy", fields: [submittedById], references: [id])
  submittedById String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  comments      Comment[]
  statusHistory StatusHistory[]
  sfSyncStatus  Boolean    @default(false)
  slaDeadline   DateTime?
}

enum Status {
  SUBMITTED
  UNDER_REVIEW
  PARTIALLY_APPROVED
  APPROVED
}

model Comment {
  id           String    @id @default(cuid())
  content      String
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId String
  parentId     String?
  parent       Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies      Comment[] @relation("CommentReplies")
  mentions     Mention[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Mention {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  createdAt DateTime @default(now())
}

model StatusHistory {
  id           String   @id @default(cuid())
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId String
  oldStatus    Status?
  newStatus    Status
  changedAt    DateTime @default(now())
}

model SLAConfig {
  id                String   @id @default(cuid())
  statusFrom        Status
  statusTo          Status
  durationHours     Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model AuditLog {
  id           String      @id @default(cuid())
  action       String
  entityType   String
  entityId     String
  details      String
  performedBy  User        @relation("PerformedBy", fields: [performedById], references: [id])
  performedById String
  createdAt    DateTime    @default(now())
}